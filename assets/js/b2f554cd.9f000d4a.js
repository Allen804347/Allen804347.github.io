"use strict";(self.webpackChunkcoddee_blog=self.webpackChunkcoddee_blog||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"front-end-performance","metadata":{"permalink":"/blog/front-end-performance","source":"@site/blog/2023-08-05-front-end-performance copy.mdx","title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","description":"","date":"2023-08-05T00:00:00.000Z","formattedDate":"2023\u5e748\u67085\u65e5","tags":[{"label":"front-end","permalink":"/blog/tags/front-end"}],"readingTime":0.085,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"front-end-performance","title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","authors":"allen","tags":["front-end"]},"nextItem":{"title":"Rive \u8207 Lottie","permalink":"/blog/rive-versus-lottie"}},"content":"# \u5982\u4f55\u6e2c\u91cf\\n# \u5de5\u5177\\n# \u5e38\u898b\u6548\u80fd\u8b70\u984c\\n# \u512a\u5316\u6848\u4f8b"},{"id":"rive-versus-lottie","metadata":{"permalink":"/blog/rive-versus-lottie","source":"@site/blog/2023-08-05-rive-versus-lottie.mdx","title":"Rive \u8207 Lottie","description":"","date":"2023-08-05T00:00:00.000Z","formattedDate":"2023\u5e748\u67085\u65e5","tags":[{"label":"front-end","permalink":"/blog/tags/front-end"}],"readingTime":0.015,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"rive-versus-lottie","title":"Rive \u8207 Lottie","authors":"allen","tags":["front-end"]},"prevItem":{"title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","permalink":"/blog/front-end-performance"},"nextItem":{"title":"\u5496\u5561\u5730\u5716","permalink":"/blog/coffee-map"}},"content":"# \u6bd4\u8f03"},{"id":"coffee-map","metadata":{"permalink":"/blog/coffee-map","source":"@site/blog/2023-08-04-coffe-map.mdx","title":"\u5496\u5561\u5730\u5716","description":"","date":"2023-08-04T00:00:00.000Z","formattedDate":"2023\u5e748\u67084\u65e5","tags":[{"label":"coffee","permalink":"/blog/tags/coffee"}],"readingTime":0.2,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"coffee-map","title":"\u5496\u5561\u5730\u5716","authors":"allen","tags":["coffee"]},"prevItem":{"title":"Rive \u8207 Lottie","permalink":"/blog/rive-versus-lottie"},"nextItem":{"title":"\u6bcf\u65e5 C++ \u7df4\u7fd2","permalink":"/blog/daily-uva-task"}},"content":"# Simple Kaffa\\n# TA Coffee\\n# ALL DAY ROASTING COMPANY\\n# RUFOUS COFFEE\\n# \u4f69\u6d1b\u745f\\n# \u805e\u5c71\u5496\u5561\\n# GABEE\\n# \u6162\u52d5\u4f5c\\n# \u7f8a\u6bdb\u8207\u82b1\\n# \u7fcc\u65e5\\n# \u9d09\u57e0\\n# \u9054\u6587\u897f\\n# James House"},{"id":"daily-uva-task","metadata":{"permalink":"/blog/daily-uva-task","source":"@site/blog/2023-07-15-daily-uva-task.mdx","title":"\u6bcf\u65e5 C++ \u7df4\u7fd2","description":"10013 Super long sums","date":"2023-07-15T00:00:00.000Z","formattedDate":"2023\u5e747\u670815\u65e5","tags":[{"label":"C++","permalink":"/blog/tags/c"},{"label":"algorithm","permalink":"/blog/tags/algorithm"}],"readingTime":3.385,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"daily-uva-task","title":"\u6bcf\u65e5 C++ \u7df4\u7fd2","authors":"allen","tags":["C++","algorithm"]},"prevItem":{"title":"\u5496\u5561\u5730\u5716","permalink":"/blog/coffee-map"}},"content":"## 10013 Super long sums\\n\\n### date: 07/14\\n\\n### code\\n```cpp\\n#include <iostream>\\n#include <string>\\n\\nusing namespace std;\\n\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    while(n-- > 0) {\\n        int len;\\n        cin >> len;\\n        string a = \\"\\";\\n        string b = \\"\\";\\n        for (int i = 0; i < len; i += 1) {\\n            char tempA, tempB;\\n            cin >> tempA >> tempB;\\n            a += tempA;\\n            b += tempB;\\n        }\\n        int carry = 0;\\n        for (int i = len - 1; i >= 0; i -= 1) {\\n            int n1 = a[i] - \'0\';\\n            int n2 = b[i] - \'0\';\\n            int temp = n1 + n2 + carry;\\n            carry = temp > 9 ? 1 : 0;\\n            temp -= carry * 10;\\n            a[i] = \'0\' + temp;\\n        }\\n        cout << a << endl;\\n        if (n > 0) {\\n            cout << endl;\\n        }\\n    }\\n    return 0;\\n}\\n```\\n\\n### comment\\n\u7d93\u5178\u984c\u76ee\u5927\u6578\u52a0\u6cd5\uff0c\u5229\u7528 array \u6216 string \u9019\u985e\u7684\u5e8f\u5217\u8cc7\u6599\u7d50\u69cb\uff0c\u5b58\u6bcf\u500b\u4f4d\u5143\u7684\u8cc7\u8a0a\uff0c\u5728\u4f9d\u5e8f\u5c0d\u6bcf\u500b\u4f4d\u5143\u9032\u884c\u52a0\u6cd5\u904b\u7b97\uff0c\u5f97\u5230\u52a0\u6cd5\u7d50\u679c\u5f8c\u5728\u5206\u6210\u9032\u4f4d\u4f4d\u5143\u548c\u7576\u524d\u4f4d\u5143\u3002\\n\\n## 10034 Freckles\\n\\n### date: 07/15\\n\\n### code\\n```cpp\\n#include <iostream>\\n#include <math.h>\\n#include <vector>\\n#include <algorithm>\\n\\nusing namespace std;\\n\\nstruct Point\\n{\\n    int root;\\n    double x;\\n    double y;\\n};\\n\\nstruct Line\\n{\\n    int indexStart; // smallest\\n    int indexEnd;   // greatest\\n    double distance;\\n};\\n\\nbool compareByLength(const Line &a, const Line &b)\\n{\\n    return a.distance > b.distance;\\n}\\n\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    while (true)\\n    {\\n        int len;\\n        cin >> len;\\n\\n        Point points[len];\\n        vector<Line> lines;\\n\\n        for (int i = 0; i < len; i += 1)\\n        {\\n            Point point;\\n            cin >> point.x >> point.y;\\n            point.root = i;\\n            points[i] = point;\\n        }\\n\\n        for (int i = 0; i < len; i += 1)\\n        {\\n            for (int j = i + 1; j < len; j += 1)\\n            {\\n                Line line;\\n                line.indexStart = i;\\n                line.indexEnd = j;\\n                line.distance = sqrt(pow(abs(points[i].x - points[j].x), 2) + pow(abs(points[i].y - points[j].y), 2));\\n                lines.push_back(line);\\n            }\\n        }\\n\\n        sort(lines.begin(), lines.end(), compareByLength);\\n\\n        double ans = 0;\\n        while (true)\\n        {\\n            Line line = lines.back();\\n            lines.pop_back();\\n\\n            if (points[line.indexStart].root == points[line.indexEnd].root)\\n                continue;\\n            ans += line.distance;\\n\\n            int root2 = points[line.indexEnd].root;\\n            for (int i = 0; i < len; i++)\\n            {\\n                if (points[i].root == root2)\\n                {\\n                    points[i].root = points[line.indexStart].root;\\n                }\\n            }\\n            bool done = true;\\n            for (int i = 1; i < len; i++)\\n            {\\n                if (points[0].root != points[i].root)\\n                {\\n                    done = false;\\n                    break;\\n                }\\n            }\\n            if (done)\\n            {\\n                break;\\n            }\\n        }\\n\\n        cout << round(ans * 100) / 100 << endl;\\n        n -= 1;\\n        if (n == 0) {\\n            break;\\n        }\\n        cout << endl;\\n    }\\n    return 0;\\n}\\n```\\n\\n### comment\\n#### Minimum spanning tree \u6700\u5c0f\u751f\u6210\u6a39\\n\\n\u7576\u6709 Point \u548c Line \u6642\uff0c\u4e14\u6bcf\u6bb5 Line \u5177\u6709 Weight(distance, cost...)\uff0c\u5c0b\u627e\u5c07\u6240\u6709 Point \u9023\u63a5\u8d77\u4f86\u4e14 Weight \u6700\u4f4e\u7684\u8def\u5f91\u5716\u3002\\n\\n![figure1](../static/img/material/MST-1.webp)\\n\u5716 (1) \u70ba\u6240\u6709 Point \u8207 Line\\n\\n\u4e32\u8d77\u6240\u6709\u7bc0\u9ede\u662f\u5fc5\u8981\u689d\u4ef6\uff0c\u4f46\u96e3\u9ede\u5728\u65bc\u5c0b\u627e\u6700\u4f4e Weight \u7684\u8def\u5f91\u5716\u3002\\n\\n* \u4e0d\u80fd\u8981\u5197\u4f59\u7684\u8def\u5f91\uff0c\u7576\u6709 [A - B, B - C] \u6642\uff0c\u610f\u5473\u8457\u4e0d\u9700\u8981 [A - C]\uff0c\u56e0\u7232\u53ef\u4ee5\u7528 [A - B - C] \u4ee3\u66ff\u3002\\n\\n* \u6700\u4f4e\u6210\u672c\\n\\n  ![figure2](../static/img/material/MST-2.webp)\\n  \u5716 (2) \u53ef\u4ee5\u9023\u8d77\u6240\u6709 Point\u3002\\n\\n  ![figure3](../static/img/material/MST-3.webp)\\n  \u4f46\u5716 (3) \u7684 Wright \u6bd4\u8f03\u4f4e\u3002\\n\\n\u4e0a\u9762\u7684\u7a0b\u5f0f\u78bc\u662f\u4f7f\u7528\u66b4\u529b\u4f5c\u6cd5\u5b8c\u6210\u6700\u4f4e\u6210\u672c\u8207\u7bc0\u9ede\u5206\u7fa4\u7684\u529f\u80fd\uff0c\u4f46\u6700\u5c0f\u751f\u6210\u6a39\u662f\u7d93\u5178\u7684\u6f14\u7b97\u6cd5\u554f\u984c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e9b\u5df2\u77e5\u7684\u6700\u4f73\u5be6\u8e10\u7b97\u6cd5\u4f86\u5be6\u505a\u3002\\n\\n[\u6700\u5c0f\u751f\u6210\u6a39\u4ecb\u7d39\u8207\u7b97\u6cd5\u8aaa\u660e](http://alrightchiu.github.io/SecondRound/minimum-spanning-treeintrojian-jie.html)"}]}')}}]);