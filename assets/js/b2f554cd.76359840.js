"use strict";(self.webpackChunkcoddee_blog=self.webpackChunkcoddee_blog||[]).push([[1477],{10:n=>{n.exports=JSON.parse('{"blogPosts":[{"id":"HTML-note","metadata":{"permalink":"/blog/HTML-note","source":"@site/blog/2023-10-16-HTML-note.mdx","title":"\u8ed2\u7530\u6a5f\u5668\u5b78\u7fd2\u7b46\u8a18","description":"\u4f55\u8b02\u6a5f\u5668\u5b78\u7fd2","date":"2023-10-16T00:00:00.000Z","formattedDate":"2023\u5e7410\u670816\u65e5","tags":[{"label":"machine learning","permalink":"/blog/tags/machine-learning"}],"readingTime":7.6,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"HTML-note","title":"\u8ed2\u7530\u6a5f\u5668\u5b78\u7fd2\u7b46\u8a18","authors":"allen","tags":["machine learning"]},"nextItem":{"title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","permalink":"/blog/front-end-performance"}},"content":"## \u4f55\u8b02\u6a5f\u5668\u5b78\u7fd2\\n\u5c0d\u4e00\u4efd\u6709\u7279\u5fb5\u7684\u8cc7\u6599\u9032\u884c\u5224\u65b7\\n\\n\u8209\u4f8b\\n\u4eba  => \u8eab\u9ad8 ,\u9ad4\u91cd, \u8170\u570d -> \u662f\u5426\u904e\u91cd, \u662f\u5426\u5065\u5eb7\\n\u904e\u5f80\u6211\u5011\u4f9d\u8cf4\u5c08\u5bb6\u7684\u610f\u898b\uff0c\u5982 BMI \u7570\u5e38\u6216\u8170\u570d\u4f86\u5224\u65b7\uff0c\u4f46\u9019\u6a23\u7684\u5224\u65b7\u6a21\u5f0f\uff0c\u5bb9\u6613\u53d7\u9650\u65bc\u898f\u6a21\uff0c\\n\u8eab\u9ad8 ,\u9ad4\u91cd, \u8170\u570d, \u8840\u7d05\u7d20\u6578\u503c, \u8840\u5c0f\u677f\u6578\u503c...\\n\u9ad4\u6aa2\u5217\u8868\u53ef\u4ee5\u5217\u51fa\u4e0a\u5343\u4e0a\u767e\u7a2e\u6307\u6578\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u91dd\u5c0d\u5404\u500b\u6578\u503c\u5224\u8b80\uff0c\u901a\u5e38\u6bcf\u500b\u6578\u503c\u4e5f\u6703\u4e5f\u6709\u5c0d\u61c9\u7684\u597d\u58de\u5340\u9593\uff0c\\n\u4f46\uff0c\u5047\u8a2d\uff0c\u6709\u4e00\u7a2e\u4eba\u5011\u9084\u4e0d\u77e5\u5230\u7684\u7279\u6b8a\u7684\u9023\u7d50\uff0c\u5728\u8eab\u9ad8\u548c\u8840\u7d05\u7d20\u6578\u503c\u9593\uff0c\u8eab\u9ad8\u4ecb\u65bc 150 - 155 \uff0c\u8840\u7d05\u7d20\u6578\u503c\u4ecb\u65bc 12 - 12.25 \uff0c\\n\u6709\u9ad8\u6a5f\u7387\u60a3\u6709\u7279\u6b8a\u75be\u75c5\uff0c\\n;  TODO\\n\\n## \u8cc7\u6599 -> \u7d50\u679c = \u65b9\u6cd5\\n\\n\u5047\u8a2d\u6709\u4e00\u500b\u88ab\u8a2d\u8a08\u597d\u7684\u5224\u65b7\u65b9\u6cd5\u53ef\u4ee5\u5224\u5225\u554f\u984c\u7684\u7d50\u679c\uff0c\u6211\u5011\u662f\u5426\u80fd\u5920\u6a21\u4eff\u9019\u500b\u65b9\u6cd5\uff1f\\n\\n\u5148\u6c7a\u689d\u4ef6\u662f\uff1a\u9019\u500b\u65b9\u6cd5\u6211\u5011\u9084\u672a\u77e5\u3002\\n\u5982\u679c\u5df2\u7d93\u77e5\u9053\u9019\u500b\u65b9\u6cd5\u7684\u78ba\u5207\u6a21\u6a23\uff0c\u90a3\u76f4\u63a5\u5957\u7528\u65b9\u6cd5\u5c31\u597d\u3002\\n\\n\u5927\u91cf\u7684\u8cc7\u6599\u5f88\u91cd\u8981\uff0c\u9700\u8981\u53cd\u8986\u9a57\u8b49\uff0c\u5927\u91cf\u7df4\u7fd2\u3002\\n\u60f3\u8981\u4ec0\u9ebc\u6a23\u7684\u7d50\u679c\uff0c\u5982\u679c\u6c92\u8fa6\u6cd5\u7cbe\u6e96\u5b9a\u7fa9\u7d50\u679c\uff0c\u4f60\u6703\u8a13\u7df4\u51fa\u597d\u50cf\u53ef\u4ee5\u53c8\u597d\u50cf\u4e0d\u884c\u7684\u6771\u897f\u3002\\n\\n{(xn, yn)} from f -> ML -> g\\nxn: \u56e0\\nyn: \u679c\\nf: \u795e\u5999\u800c\u4e0d\u53ef\u77e5\u7684\u56e0\u679c\u95dc\u4fc2\\ng: \u6211\u5011\u5c0d\u9019\u7a2e\u795e\u5999\u7684\u731c\u60f3\\n\\n\u5176\u4e2d yn \u662f f \u7522\u751f\u7684\u3002\\n\u900f\u904e ML \u627e\u5230\u8ddf f \u63a5\u8fd1\u7684 g\u3002\\n\u63db\u53e5\u8a71\u8aaa\uff0c\u56e0\u679c\u4e4b\u9593\u5b58\u5728\u67d0\u7a2e\u88ab\u898f\u5b9a\u597d\u7684\u95dc\u4fc2\uff0c\u4f46\u9019\u500b\u795e\u5999\u800c\u4e0d\u53ef\u77e5\u7684\u56e0\u679c\u95dc\u4fc2\u6211\u5011\u6c92\u8fa6\u6cd5\u770b\u900f\uff0c\u6240\u4ee5\u53ea\u80fd\u900f\u904e\u8cc7\u6599\u548c\u7d50\u679c\uff0c\u81ea\u5df1\u8166\u88dc\u4e2d\u9593\u7684\u95dc\u4fc2\u3002\\n\\n## \u53ef\u80fd\u4fe1\u7121\u9650\u591a\u7a2e\\n\\nhypothesis set\\n\u627e\u5230\u6700\u597d\u7684 hypothesis \u6211\u5011\u7a31\u4e4b\u70ba g\\n\\n# Lecture 2\\n\\n## Perceptron\\n\u611f\u77e5\u6a5f\uff0c\u9019\u500b\u540d\u5b57\u672c\u8eab\u4e0d\u91cd\u8981\uff0c\u53ea\u662f\u6b77\u53f2\u56e0\u7d20\u907a\u7559\u4e0b\u4f86\u7684\u6163\u7528\u540d\u5b57\\n\\ng = sign(Sigma 1 ~ N(W_i * X_i) - threshold)\\n  = sign(Sigma 0 ~ N(W_i * X_i)) // W_0 = -threshold, X_0 = 1\\n  = sign(W^T*X)\\n\\n# Lecture 10\\n\\n## \u57fa\u65bc\u4e8c\u5143\u7d50\u679c\u7684\u6a5f\u7387 - logistic regression\\n\u60f3\u77e5\u9053\u4e00\u500b 0 ~ 1 \u7684\u7d50\u679c\uff0c\u4e0d\u8981\u4e8c\u5143\u7684\u7b54\u6848(true/false)\uff0c\u800c\u662f\u66f4\u62bd\u8c61\u7684\u6a5f\u7387(\u5927 50% \u4ee3\u8868\u66f4\u63a5\u8fd1\u65bc true\uff0c\u5c0f\u65bc\u5247\u63a5\u8fd1 false )\\n\\n## \u57f7\u884c\u4e0a\u7684\u56f0\u96e3\uff0c\u4ee5\u53ca\u6298\u8877\u4f5c\u6cd5\\n\u5be6\u969b\u5f88\u96e3\u62ff\u5230\u9019\u7a2e\u6a5f\u7387\u7684\u771f\u5be6\u8cc7\u6599(\u62ff\u4e0d\u5230\u6a02\u900f\u865f\u78bc\u7684\u958b\u734e\u6a5f\u7387)\uff0c\u7528 true == 1, false == 0 \u4f86\u7576\u505a\u6709\u96dc\u8a0a\u7684\u7b54\u6848\uff0c\\ne.g.\\n\u5982\u679c\u771f\u5be6\u6a5f\u7387\u662f 0.7(70%) \u90a3\u9019\u6b21\u62ff\u5230 true \u4ee3\u8868\u7b54\u6848(y)\u70ba 1 \u4f46\u6709 0.3 \u7684\u96dc\u8a0a\uff0c\u5982\u679c\u62ff\u5230 false \u4ee3\u8868\u7b54\u6848(y)\u70ba 0 \u4f46\u6709 0.7 \u7684\u96dc\u8a0a\\n\\n## sigmoid\\n\\n\u7528 sigmoid \u51fd\u6578\u4f86\u505a\u5206\u6578\u6578\u8f49\u63db\\n\u900f\u904e linear regression \u7b97\u51fa\u4f86\u7684\u539f\u59cb\u5206\u6578\uff0c\u5e36\u9032 sigmoid \u51fd\u6578\u8f49\u63db\u6210 0 ~ 1 \u7684\u51fd\u6578\\n\\ns => linear regression \u7b97\u51fa\u4f86\u7684\u539f\u59cb\u5206\u6578\\n\u03b8(s) = e^s / 1 + e^s\\n\u5206\u6bcd\u5206\u5b50\u540c\u4e58 1/e^s\\n= 1 / 1 + e^-s\\n\\n\u56e0\u70ba s \u662f linear regression \u7b97\u51fa\u4f86\u7684\u539f\u59cb\u5206\u6578\uff0c\u5e36\u5165 s = w^T * x\\n\u539f\u672c h(x) = w^T * x\\n\u5e36\u5165 \u03b8(s)\\nh\'(x) = \u03b8(h(x))\\n= 1 / 1 + e^-(w^T * x)\\n\u4e0d\u8981\u4e00\u5806\u6b21\u65b9\u7b26\u865f\u7528 exp \u7f8e\u5316\u4e00\u4e0b\\n= 1 / 1 + exp(-w^T * x)\\n\\n## f(x) in logistic regression\\n\\nlogistic regression \u662f\u91dd\u5c0d\u7d50\u679c\u70ba true \u6216 false \u7684\u6a5f\u7387\\nf(x) = P(+1|X) or f(x) = P(-1|X)\\n\u53ef\u4ee5\u7528\u9019\u500b\u4f86\u8868\u9054 f(x)\\n\u64f4\u5c55 f(x) = P(y|X), y \u2208 {+1, -1}\\n\\n### Likelihood\\nP(y|x) = P(+1|x) + P(-1|x)\\nP(+1|x) := f(x)\\nP(-1|x) = 1 - f(x)\\n\\n\u6ce8\u610f\uff0c\u9019\u88e1\u4f7f\u7528\u7684\u662f := (\u5b9a\u7fa9\u7b26\u865f)\uff0c\u8207\u7b49\u865f\u4e0d\u540c\u7684\u662f\uff0c\u5b9a\u7fa9\u4ee3\u8868\u5047\u8a2d\u7684\u958b\u7aef\uff0c\\n\u539f\u5247\u4e0a\u7b49\u865f\u8981\u5177\u6709\u7d55\u5c0d\u7684\u76f8\u7b49\u610f\u7fa9\uff0c\\n\u4f46\u5b9a\u7fa9\u4e0d\u540c\uff0c\u4e0d\u9700\u8981\u5177\u5099\u7d55\u5c0d\u7684\u6982\u5ff5\uff0c\\n\u4ee5\u9019\u88e1\u70ba\u4f8b\uff0cP(+1|x) := f(x) \u4ee3\u8868\u5b9a\u7fa9 +1 \u7684\u6a5f\u7387\u662f f(x)\uff0c\\n\u4f46\u4e0d\u4ee3\u8868\u9019\u5169\u8005\u76f8\u7b49\uff0c\u53ea\u662f\u5047\u5b9a\u63a5\u4e0b\u4f86\u7684\u63a8\u5c0e\u662f\u4ee5 P(+1|x) := f(x) \u70ba\u524d\u63d0\u9032\u884c\u4e0b\u53bb\uff0c\\n\u53cd\u4e4b P(-1|x) := f(x), P(+1|x) = 1 - f(x) \u4e5f\u53ef\u4ee5\u4f5c\u70ba\u958b\u7aef\u9032\u884c\u63a8\u5c0e\u3002\\n\\nD = {(x_1, y_1),(x_2, y_2), . . . ,(x_N, y_N)}\\nD = {(x_1, \u25e6),(x_2, \xd7), . . . ,(x_N, \xd7)}\\n\u9019\u88e1\u662f\u5728\u8a0e\u8ad6\uff0c\u7576\u6211\u5011\u6709\u771f\u5be6\u8cc7\u6599 D\uff0c\u60f3\u5411\u4ed6\u7684\u7d44\u6210\u5c31\u662f x_i \u5c0d\u61c9 y_i \u7684\u8cc7\u6599\u96c6\uff0c\\n\u6bcf\u500b y_i \u4e0d\u662f +1(\u25e6) \u5c31\u662f(\xd7)\uff0c\u53ef\u4ee5\u8868\u793a\u6210\u7b2c\u4e8c\u689d\u5f0f\u5b50\u3002\\n\\n#### probability that f generates D\\n\\n\u601d\u8003 D \u9019\u500b\u8cc7\u6599\u96c6\u51fa\u73fe\u7684\u6a5f\u7387\uff0c\u832b\u832b\u8cc7\u6599\u4e2d\u51fa\u73fe\u9019\u6a23\u7684\u8cc7\u6599\u7d44\u7684\u53ef\u80fd\u6027\u3002\\n\\nP(x_1)f(x_1) * P(x_2)(1 \u2212 f(x_2)) * ... * P(x_N)(1 \u2212 f(x_N))\\n\\n\u53c3\u8003\u524d\u9762\u7684\u5f0f\u5b50 f(x_i) \u4ee3\u8868\u7d50\u679c\u70ba \u25e6\uff0c (1 \u2212 f(x_i)) \u4ee3\u8868\u7d50\u679c\u70ba \xd7\u3002\\n\\n#### likelihood that h generates D\\n\\nP(x_1)h(x_1) * P(x_2)(1 \u2212 h(x_2)) * ... * P(x_N)(1 \u2212 h(x_N))\\n\\n\u628a f \u66ff\u63db\u6210 h\uff0c\u7576\u7136\uff0ch \u4e0d\u662f f\uff0c\u6240\u4ee5\u9019\u88e1\u60f3\u8a0e\u8ad6\u7684\u662f h \u6709\u591a\u63a5\u8fd1 f\u3002\\n\u6240\u4ee5\u6211\u5011\u6703\u5f9e H (Hypothesis set) \u6311\u4e00\u500b\u6700\u8fd1\u50cf f \u7684 h\u3002\\n\u5982\u679c\u8cc7\u6599\u7b46\u6578\u5920\u591a (N \u5920\u5927)\uff0ch \u61c9\u8a72\u6703\u5f88\u63a5\u8fd1 f\uff0c\u7a31\u70ba\u5927\u6578\u4f3c\u7136\u6cd5\u5247\u3002\\n\\n## Cross-Entropy Error\\n\\nP(x_1)f(x_1) * P(x_2)(1 \u2212 f(x_2)) * ... * P(x_N)(1 \u2212 f(x_N))\\nv.s.\\nP(x_1)h(x_1) * P(x_2)(1 \u2212 h(x_2)) * ... * P(x_N)(1 \u2212 h(x_N))\\n\\n\u5169\u8005\u5728 P(x_i) \u7684\u90e8\u5206\u662f\u4e00\u6a23\u7684\uff0c\u5728\u5f8c\u9762\u7684\u8a08\u7b97\u4e2d\uff0c\u6211\u5011\u53ea\u5728\u4e4e\u4e0d\u4e00\u6a23\u7684\u90e8\u5206 f(x_i) v.s. h(x_i)\u3002\\n\\n\\nmax of h => likelihood(logistic h) \u221d \u220f(h(y_n * x_n), n = 1 to N)\\nmax of w => likelihood(logistic w) \u221d \u220f(\u03b8(y_n * w^T * x_n), n = 1 to N)\\nmax of w \u221d ln(\u220f(\u03b8(y_n * w^T * x_n), n = 1 to N))\\n\\n\u6ce8\u610f\uff0c\u9019\u88e1\u4f7f\u7528 ln \u6709\u5e7e\u500b\u56e0\u7d20\uff0c\\n1. \u70ba\u4e86\u89e3\u6c7a\u9023\u4e58(\u220f)\uff0cln \u53ef\u4ee5\u5e6b\u52a9\u6211\u5011\u8f49\u63db\u6210 sigma\u3002\\n2. \u5c07\u4e00\u500b\u51fd\u6578\u76f4\u63a5\u5957\u4e0a ln => ln(f(x)) v.s f(x) \uff0cln(f(x)) \u7684\u503c\u6703\u7e2e\u5c0f\u4f46\u6b63\u76f8\u95dc\u65bc f(x)\uff0c\u96d6\u7136\u51fd\u6578\u5716\u5f62\u6703\u5931\u771f\uff0c\u4f46\u8f49\u63db\u5f8c\u7684\u7279\u6027\u4e0d\u8b8a\uff0c\u9019\u9ede\u5c0d\u6211\u5011\u7684\u76ee\u6a19\u6c92\u6709\u56b4\u91cd\u7684\u5f71\u97ff\u3002\\n3. \u6574\u500b\u63a8\u5c0e\u6700\u5f8c\u60f3\u6c42\u7684\u503c\u662f min of w\uff0cln(f(x)) \u6703\u6bd4 f(x) \u66f4\u5c0f\uff0c\u5c31\u9019\u9ede\u800c\u8a00\u9078\u7528 ln \u662f\u6709\u5e6b\u52a9\u7684\u3002\\n4. \u7d9c\u4e0a\u6240\u8ff0\uff0cln(f(x)) \u548c f(x) \u7684\u5be6\u8cea\u610f\u7fa9\u4e0d\u76e1\u76f8\u540c\uff0c\u4f46\u90e8\u5206\u7279\u6027\u4fdd\u6709\u4e00\u5236\uff0c\u6240\u4ee5\u9078\u64c7\u505a\u51fa\u9019\u6a23\u7684\u8f49\u63db\u3002\\n\\nmin of w => (1/N)\u03a3(-ln(\u03b8(y_n * w^T * x_n)), n = 1 to N)\\n\\nmin of w => (1/N)\u03a3(ln(1 + exp(y_n * w^T * x_n)), n = 1 to N)"},{"id":"front-end-performance","metadata":{"permalink":"/blog/front-end-performance","source":"@site/blog/2023-08-05-front-end-performance copy.mdx","title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","description":"","date":"2023-08-05T00:00:00.000Z","formattedDate":"2023\u5e748\u67085\u65e5","tags":[{"label":"front-end","permalink":"/blog/tags/front-end"}],"readingTime":0.085,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"front-end-performance","title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","authors":"allen","tags":["front-end"]},"prevItem":{"title":"\u8ed2\u7530\u6a5f\u5668\u5b78\u7fd2\u7b46\u8a18","permalink":"/blog/HTML-note"},"nextItem":{"title":"Rive \u8207 Lottie","permalink":"/blog/rive-versus-lottie"}},"content":"# \u5982\u4f55\u6e2c\u91cf\\n# \u5de5\u5177\\n# \u5e38\u898b\u6548\u80fd\u8b70\u984c\\n# \u512a\u5316\u6848\u4f8b"},{"id":"rive-versus-lottie","metadata":{"permalink":"/blog/rive-versus-lottie","source":"@site/blog/2023-08-05-rive-versus-lottie.mdx","title":"Rive \u8207 Lottie","description":"\u4f55\u8b02\u6a5f\u5668\u5b78\u7fd2","date":"2023-08-05T00:00:00.000Z","formattedDate":"2023\u5e748\u67085\u65e5","tags":[{"label":"front-end","permalink":"/blog/tags/front-end"}],"readingTime":2.595,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"rive-versus-lottie","title":"Rive \u8207 Lottie","authors":"allen","tags":["front-end"]},"prevItem":{"title":"\u524d\u7aef\u6548\u80fd\u63a2\u8a0e","permalink":"/blog/front-end-performance"},"nextItem":{"title":"\u5496\u5561\u5730\u5716","permalink":"/blog/coffee-map"}},"content":"## \u4f55\u8b02\u6a5f\u5668\u5b78\u7fd2\\n\u5c0d\u4e00\u4efd\u6709\u7279\u5fb5\u7684\u8cc7\u6599\u9032\u884c\u5224\u65b7\\n\\n\u8209\u4f8b\\n\u4eba  => \u8eab\u9ad8 ,\u9ad4\u91cd, \u8170\u570d -> \u662f\u5426\u904e\u91cd, \u662f\u5426\u5065\u5eb7\\n\u904e\u5f80\u6211\u5011\u4f9d\u8cf4\u5c08\u5bb6\u7684\u610f\u898b\uff0c\u5982 BMI \u7570\u5e38\u6216\u8170\u570d\u4f86\u5224\u65b7\uff0c\u4f46\u9019\u6a23\u7684\u5224\u65b7\u6a21\u5f0f\uff0c\u5bb9\u6613\u53d7\u9650\u65bc\u898f\u6a21\uff0c\\n\u8eab\u9ad8 ,\u9ad4\u91cd, \u8170\u570d, \u8840\u7d05\u7d20\u6578\u503c, \u8840\u5c0f\u677f\u6578\u503c...\\n\u9ad4\u6aa2\u5217\u8868\u53ef\u4ee5\u5217\u51fa\u4e0a\u5343\u4e0a\u767e\u7a2e\u6307\u6578\uff0c\u6211\u5011\u4e5f\u53ef\u4ee5\u91dd\u5c0d\u5404\u500b\u6578\u503c\u5224\u8b80\uff0c\u901a\u5e38\u6bcf\u500b\u6578\u503c\u4e5f\u6703\u4e5f\u6709\u5c0d\u61c9\u7684\u597d\u58de\u5340\u9593\uff0c\\n\u4f46\uff0c\u5047\u8a2d\uff0c\u6709\u4e00\u7a2e\u4eba\u5011\u9084\u4e0d\u77e5\u5230\u7684\u7279\u6b8a\u7684\u9023\u7d50\uff0c\u5728\u8eab\u9ad8\u548c\u8840\u7d05\u7d20\u6578\u503c\u9593\uff0c\u8eab\u9ad8\u4ecb\u65bc 150 - 155 \uff0c\u8840\u7d05\u7d20\u6578\u503c\u4ecb\u65bc 12 - 12.25 \uff0c\\n\u6709\u9ad8\u6a5f\u7387\u60a3\u6709\u7279\u6b8a\u75be\u75c5\uff0c\\n;  TODO\\n\\n## \u8cc7\u6599 -> \u7d50\u679c = \u65b9\u6cd5\\n\\n\u5047\u8a2d\u6709\u4e00\u500b\u88ab\u8a2d\u8a08\u597d\u7684\u5224\u65b7\u65b9\u6cd5\u53ef\u4ee5\u5224\u5225\u554f\u984c\u7684\u7d50\u679c\uff0c\u6211\u5011\u662f\u5426\u80fd\u5920\u6a21\u4eff\u9019\u500b\u65b9\u6cd5\uff1f\\n\\n\u5148\u6c7a\u689d\u4ef6\u662f\uff1a\u9019\u500b\u65b9\u6cd5\u6211\u5011\u9084\u672a\u77e5\u3002\\n\u5982\u679c\u5df2\u7d93\u77e5\u9053\u9019\u500b\u65b9\u6cd5\u7684\u78ba\u5207\u6a21\u6a23\uff0c\u90a3\u76f4\u63a5\u5957\u7528\u65b9\u6cd5\u5c31\u597d\u3002\\n\\n\u5927\u91cf\u7684\u8cc7\u6599\u5f88\u91cd\u8981\uff0c\u9700\u8981\u53cd\u8986\u9a57\u8b49\uff0c\u5927\u91cf\u7df4\u7fd2\u3002\\n\u60f3\u8981\u4ec0\u9ebc\u6a23\u7684\u7d50\u679c\uff0c\u5982\u679c\u6c92\u8fa6\u6cd5\u7cbe\u6e96\u5b9a\u7fa9\u7d50\u679c\uff0c\u4f60\u6703\u8a13\u7df4\u51fa\u597d\u50cf\u53ef\u4ee5\u53c8\u597d\u50cf\u4e0d\u884c\u7684\u6771\u897f\u3002\\n\\n{(xn, yn)} from f -> ML -> g\\nxn: \u56e0\\nyn: \u679c\\nf: \u795e\u5999\u800c\u4e0d\u53ef\u77e5\u7684\u56e0\u679c\u95dc\u4fc2\\ng: \u6211\u5011\u5c0d\u9019\u7a2e\u795e\u5999\u7684\u731c\u60f3\\n\\n\u5176\u4e2d yn \u662f f \u7522\u751f\u7684\u3002\\n\u900f\u904e ML \u627e\u5230\u8ddf f \u63a5\u8fd1\u7684 g\u3002\\n\u63db\u53e5\u8a71\u8aaa\uff0c\u56e0\u679c\u4e4b\u9593\u5b58\u5728\u67d0\u7a2e\u88ab\u898f\u5b9a\u597d\u7684\u95dc\u4fc2\uff0c\u4f46\u9019\u500b\u795e\u5999\u800c\u4e0d\u53ef\u77e5\u7684\u56e0\u679c\u95dc\u4fc2\u6211\u5011\u6c92\u8fa6\u6cd5\u770b\u900f\uff0c\u6240\u4ee5\u53ea\u80fd\u900f\u904e\u8cc7\u6599\u548c\u7d50\u679c\uff0c\u81ea\u5df1\u8166\u88dc\u4e2d\u9593\u7684\u95dc\u4fc2\u3002\\n\\n## \u53ef\u80fd\u4fe1\u7121\u9650\u591a\u7a2e\\n\\nhypothesis set\\n\u627e\u5230\u6700\u597d\u7684 hypothesis \u6211\u5011\u7a31\u4e4b\u70ba g\\n\\n# Lecture 2\\n\\n## Perceptron\\n\u611f\u77e5\u6a5f\uff0c\u9019\u500b\u540d\u5b57\u672c\u8eab\u4e0d\u91cd\u8981\uff0c\u53ea\u662f\u6b77\u53f2\u56e0\u7d20\u907a\u7559\u4e0b\u4f86\u7684\u6163\u7528\u540d\u5b57\\n\\ng = sign(Sigma 1 ~ N(W_i * X_i) - threshold)\\n  = sign(Sigma 0 ~ N(W_i * X_i)) // W_0 = -threshold, X_0 = 1\\n  = sign(W^T*X)"},{"id":"coffee-map","metadata":{"permalink":"/blog/coffee-map","source":"@site/blog/2023-08-04-coffe-map.mdx","title":"\u5496\u5561\u5730\u5716","description":"","date":"2023-08-04T00:00:00.000Z","formattedDate":"2023\u5e748\u67084\u65e5","tags":[{"label":"coffee","permalink":"/blog/tags/coffee"}],"readingTime":0.235,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"coffee-map","title":"\u5496\u5561\u5730\u5716","authors":"allen","tags":["coffee"]},"prevItem":{"title":"Rive \u8207 Lottie","permalink":"/blog/rive-versus-lottie"},"nextItem":{"title":"\u6bcf\u65e5 C++ \u7df4\u7fd2","permalink":"/blog/daily-uva-task"}},"content":"# Simple Kaffa\\n# TA Coffee\\n# ALL DAY ROASTING COMPANY\\n# RUFOUS COFFEE\\n# \u4f69\u6d1b\u745f\\n# \u805e\u5c71\u5496\u5561\\n# GABEE\\n# \u6162\u52d5\u4f5c\\n# \u7f8a\u6bdb\u8207\u82b1\\n# \u7fcc\u65e5\\n# \u9d09\u57e0\\n# \u9054\u6587\u897f\\n# James House\\n# \u7470\u590f\\n# \u67d0\u5496\u5561\\n# balance"},{"id":"daily-uva-task","metadata":{"permalink":"/blog/daily-uva-task","source":"@site/blog/2023-07-15-daily-uva-task.mdx","title":"\u6bcf\u65e5 C++ \u7df4\u7fd2","description":"10013 Super long sums","date":"2023-07-15T00:00:00.000Z","formattedDate":"2023\u5e747\u670815\u65e5","tags":[{"label":"C++","permalink":"/blog/tags/c"},{"label":"algorithm","permalink":"/blog/tags/algorithm"}],"readingTime":3.385,"hasTruncateMarker":false,"authors":[{"name":"Allen Hsieh","title":"Engineer","url":"https://allen804347.github.io","imageURL":"/img/avatar.jpg","key":"allen"}],"frontMatter":{"slug":"daily-uva-task","title":"\u6bcf\u65e5 C++ \u7df4\u7fd2","authors":"allen","tags":["C++","algorithm"]},"prevItem":{"title":"\u5496\u5561\u5730\u5716","permalink":"/blog/coffee-map"}},"content":"## 10013 Super long sums\\n\\n### date: 07/14\\n\\n### code\\n```cpp\\n#include <iostream>\\n#include <string>\\n\\nusing namespace std;\\n\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    while(n-- > 0) {\\n        int len;\\n        cin >> len;\\n        string a = \\"\\";\\n        string b = \\"\\";\\n        for (int i = 0; i < len; i += 1) {\\n            char tempA, tempB;\\n            cin >> tempA >> tempB;\\n            a += tempA;\\n            b += tempB;\\n        }\\n        int carry = 0;\\n        for (int i = len - 1; i >= 0; i -= 1) {\\n            int n1 = a[i] - \'0\';\\n            int n2 = b[i] - \'0\';\\n            int temp = n1 + n2 + carry;\\n            carry = temp > 9 ? 1 : 0;\\n            temp -= carry * 10;\\n            a[i] = \'0\' + temp;\\n        }\\n        cout << a << endl;\\n        if (n > 0) {\\n            cout << endl;\\n        }\\n    }\\n    return 0;\\n}\\n```\\n\\n### comment\\n\u7d93\u5178\u984c\u76ee\u5927\u6578\u52a0\u6cd5\uff0c\u5229\u7528 array \u6216 string \u9019\u985e\u7684\u5e8f\u5217\u8cc7\u6599\u7d50\u69cb\uff0c\u5b58\u6bcf\u500b\u4f4d\u5143\u7684\u8cc7\u8a0a\uff0c\u5728\u4f9d\u5e8f\u5c0d\u6bcf\u500b\u4f4d\u5143\u9032\u884c\u52a0\u6cd5\u904b\u7b97\uff0c\u5f97\u5230\u52a0\u6cd5\u7d50\u679c\u5f8c\u5728\u5206\u6210\u9032\u4f4d\u4f4d\u5143\u548c\u7576\u524d\u4f4d\u5143\u3002\\n\\n## 10034 Freckles\\n\\n### date: 07/15\\n\\n### code\\n```cpp\\n#include <iostream>\\n#include <math.h>\\n#include <vector>\\n#include <algorithm>\\n\\nusing namespace std;\\n\\nstruct Point\\n{\\n    int root;\\n    double x;\\n    double y;\\n};\\n\\nstruct Line\\n{\\n    int indexStart; // smallest\\n    int indexEnd;   // greatest\\n    double distance;\\n};\\n\\nbool compareByLength(const Line &a, const Line &b)\\n{\\n    return a.distance > b.distance;\\n}\\n\\nint main()\\n{\\n    int n;\\n    cin >> n;\\n    while (true)\\n    {\\n        int len;\\n        cin >> len;\\n\\n        Point points[len];\\n        vector<Line> lines;\\n\\n        for (int i = 0; i < len; i += 1)\\n        {\\n            Point point;\\n            cin >> point.x >> point.y;\\n            point.root = i;\\n            points[i] = point;\\n        }\\n\\n        for (int i = 0; i < len; i += 1)\\n        {\\n            for (int j = i + 1; j < len; j += 1)\\n            {\\n                Line line;\\n                line.indexStart = i;\\n                line.indexEnd = j;\\n                line.distance = sqrt(pow(abs(points[i].x - points[j].x), 2) + pow(abs(points[i].y - points[j].y), 2));\\n                lines.push_back(line);\\n            }\\n        }\\n\\n        sort(lines.begin(), lines.end(), compareByLength);\\n\\n        double ans = 0;\\n        while (true)\\n        {\\n            Line line = lines.back();\\n            lines.pop_back();\\n\\n            if (points[line.indexStart].root == points[line.indexEnd].root)\\n                continue;\\n            ans += line.distance;\\n\\n            int root2 = points[line.indexEnd].root;\\n            for (int i = 0; i < len; i++)\\n            {\\n                if (points[i].root == root2)\\n                {\\n                    points[i].root = points[line.indexStart].root;\\n                }\\n            }\\n            bool done = true;\\n            for (int i = 1; i < len; i++)\\n            {\\n                if (points[0].root != points[i].root)\\n                {\\n                    done = false;\\n                    break;\\n                }\\n            }\\n            if (done)\\n            {\\n                break;\\n            }\\n        }\\n\\n        cout << round(ans * 100) / 100 << endl;\\n        n -= 1;\\n        if (n == 0) {\\n            break;\\n        }\\n        cout << endl;\\n    }\\n    return 0;\\n}\\n```\\n\\n### comment\\n#### Minimum spanning tree \u6700\u5c0f\u751f\u6210\u6a39\\n\\n\u7576\u6709 Point \u548c Line \u6642\uff0c\u4e14\u6bcf\u6bb5 Line \u5177\u6709 Weight(distance, cost...)\uff0c\u5c0b\u627e\u5c07\u6240\u6709 Point \u9023\u63a5\u8d77\u4f86\u4e14 Weight \u6700\u4f4e\u7684\u8def\u5f91\u5716\u3002\\n\\n![figure1](../static/img/material/MST-1.webp)\\n\u5716 (1) \u70ba\u6240\u6709 Point \u8207 Line\\n\\n\u4e32\u8d77\u6240\u6709\u7bc0\u9ede\u662f\u5fc5\u8981\u689d\u4ef6\uff0c\u4f46\u96e3\u9ede\u5728\u65bc\u5c0b\u627e\u6700\u4f4e Weight \u7684\u8def\u5f91\u5716\u3002\\n\\n* \u4e0d\u80fd\u8981\u5197\u4f59\u7684\u8def\u5f91\uff0c\u7576\u6709 [A - B, B - C] \u6642\uff0c\u610f\u5473\u8457\u4e0d\u9700\u8981 [A - C]\uff0c\u56e0\u7232\u53ef\u4ee5\u7528 [A - B - C] \u4ee3\u66ff\u3002\\n\\n* \u6700\u4f4e\u6210\u672c\\n\\n  ![figure2](../static/img/material/MST-2.webp)\\n  \u5716 (2) \u53ef\u4ee5\u9023\u8d77\u6240\u6709 Point\u3002\\n\\n  ![figure3](../static/img/material/MST-3.webp)\\n  \u4f46\u5716 (3) \u7684 Wright \u6bd4\u8f03\u4f4e\u3002\\n\\n\u4e0a\u9762\u7684\u7a0b\u5f0f\u78bc\u662f\u4f7f\u7528\u66b4\u529b\u4f5c\u6cd5\u5b8c\u6210\u6700\u4f4e\u6210\u672c\u8207\u7bc0\u9ede\u5206\u7fa4\u7684\u529f\u80fd\uff0c\u4f46\u6700\u5c0f\u751f\u6210\u6a39\u662f\u7d93\u5178\u7684\u6f14\u7b97\u6cd5\u554f\u984c\uff0c\u53ef\u4ee5\u7528\u4e00\u4e9b\u5df2\u77e5\u7684\u6700\u4f73\u5be6\u8e10\u7b97\u6cd5\u4f86\u5be6\u505a\u3002\\n\\n[\u6700\u5c0f\u751f\u6210\u6a39\u4ecb\u7d39\u8207\u7b97\u6cd5\u8aaa\u660e](http://alrightchiu.github.io/SecondRound/minimum-spanning-treeintrojian-jie.html)"}]}')}}]);